import axios from 'axios';

// Create axios instance with base configuration
const apiClient = axios.create({
  baseURL: import.meta.env.VITE_API_URL || 'http://localhost:8000',
  timeout: 30000,
  headers: {
    'Content-Type': 'application/json',
  },
});

// Alias for backward compatibility
const api = apiClient;

// Request interceptor to add auth token
api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('authToken');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// Response interceptor for error handling
api.interceptors.response.use(
  (response) => response,
  (error) => {
    if (error.response?.status === 401) {
      localStorage.removeItem('authToken');
      window.location.href = '/login';
    }
    return Promise.reject(error);
  }
);

// Auth API
export const authAPI = {
  register: (userData) => api.post('/v1/auth/register', userData),
  login: (credentials) => api.post('/v1/auth/login', credentials),
  logout: () => api.post('/v1/auth/logout'),
  getProfile: () => api.get('/v1/auth/profile'),
};

// Story API
export const storyAPI = {
  createStory: async (storyData) => {
    try {
      return await api.post('/v1/story/create', storyData);
    } catch (error) {
      // Return mock story in demo mode
      const mockStory = {
        id: `story_${Date.now()}`,
        title: `Generated Story: ${storyData.input_data.scenario || 'Demo Story'}`,
        content: `This is a demo story created from your input. In live mode, this would be generated by AI based on your ${storyData.input_type} input. The story would be written in ${storyData.language} with a ${storyData.tone} tone for ${storyData.target_audience} audience.`,
        language: storyData.language,
        tone: storyData.tone,
        target_audience: storyData.target_audience,
        input_type: storyData.input_type,
        length: storyData.length,
        created_at: new Date().toISOString(),
        metadata: {
          input_data: storyData.input_data,
          length: storyData.length
        }
      };
      return { data: mockStory };
    }
  },
  getStories: async (params = {}) => {
    try {
      return await api.get('/v1/story/stories', { params });
    } catch (error) {
      // Return mock stories in demo mode
      return { data: { stories: mockData.stories } };
    }
  },
  getStory: (storyId) => api.get(`/v1/story/stories/${storyId}`),
  updateStory: (storyId, storyData) => api.put(`/v1/story/stories/${storyId}`, storyData),
  deleteStory: (storyId) => api.delete(`/v1/story/stories/${storyId}`),
  getSupportedLanguages: () => api.get('/v1/story/languages'),
  getSupportedTones: () => api.get('/v1/story/tones'),
  getTargetAudiences: () => api.get('/v1/story/audiences'),
  getStoryTemplates: () => api.get('/v1/story/templates'),
  getSampleScenarios: () => api.get('/v1/test/sample-scenarios'),
  getSampleCharacters: () => api.get('/v1/test/sample-characters'),
};

// TTS API
export const ttsAPI = {
  generateAudio: (ttsData) => api.post('/v1/tts/generate', ttsData),
  getVoicePresets: (language) => api.get('/v1/voices/presets', { params: { language } }),
  getSupportedEmotions: () => api.get('/v1/voices/emotions'),
  getSupportedLanguages: () => api.get('/v1/voices/languages'),
  generateBatchAudio: (requests) => api.post('/v1/tts/batch', requests),
  previewVoice: (voicePreset, language = 'en') => 
    api.get(`/v1/tts/preview/${voicePreset}`, { params: { language } }),
};

// Vision API
export const visionAPI = {
  analyzeImage: (imageData) => api.post('/v1/vision/analyze', imageData),
  uploadImage: (formData) => api.post('/v1/stories/upload-image', formData, {
    headers: {
      'Content-Type': 'multipart/form-data',
    },
  }),
  getImage: (imageId) => api.get(`/v1/vision/images/${imageId}`),
  getImages: (params = {}) => api.get('/v1/vision/images/', { params }),
  deleteImage: (imageId) => api.delete(`/v1/vision/images/${imageId}`),
  batchAnalyzeImages: (imageUrls) => api.post('/v1/vision/batch-analyze', { image_urls: imageUrls }),
  getVisionCapabilities: () => api.get('/v1/vision/capabilities'),
  getSampleImages: () => api.get('/v1/test/sample-images'),
};


// Utility functions
export const apiUtils = {
  // Convert file to base64
  fileToBase64: (file) => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.readAsDataURL(file);
      reader.onload = () => resolve(reader.result);
      reader.onerror = reject;
    });
  },

  // Create FormData for file uploads
  createFormData: (file, additionalData = {}) => {
    const formData = new FormData();
    formData.append('file', file);
    Object.keys(additionalData).forEach(key => {
      formData.append(key, additionalData[key]);
    });
    return formData;
  },

  // Handle API errors
  handleError: (error) => {
    if (error.response) {
      return {
        status: error.response.status,
        message: error.response.data?.detail || error.response.data?.message || 'Server error',
        data: error.response.data
      };
    } else if (error.request) {
      return {
        status: 0,
        message: 'Network error - please check your connection',
        data: null
      };
    } else {
      return {
        status: 0,
        message: error.message || 'Unknown error occurred',
        data: null
      };
    }
  },

  // Health check with graceful fallback
  checkHealth: async () => {
    try {
      const response = await apiClient.get('/health');
      return response;
    } catch (error) {
      // Silently handle the error and return mock status
      return {
        data: {
          status: 'degraded',
          message: 'Backend services unavailable - running in demo mode',
          services: {
            'api-gateway': 'unavailable',
            'auth-service': 'unavailable',
            'story-service': 'unavailable',
            'tts-service': 'unavailable',
            'vision-service': 'unavailable'
          }
        }
      };
    }
  },

  // Check if running in mock mode
  mockMode: !window.location.hostname.includes('localhost') && !window.location.hostname.includes('127.0.0.1')
};

// Mock data for development
export const mockData = {
  stories: [
    {
      id: 'story_1',
      title: 'The Brave Little Mouse',
      content: 'Once upon a time, in a cozy little house, lived a brave little mouse named Pip...',
      language: 'en',
      tone: 'adventurous',
      target_audience: 'kids',
      input_type: 'scenario',
      created_at: new Date().toISOString(),
      metadata: {
        length: 250,
        input_data: { scenario: 'A brave little mouse goes on an adventure' }
      }
    }
  ],
  
  voicePresets: [
    {
      id: 'narrator_calm',
      name: 'Calm Narrator',
      language: 'en',
      gender: 'female',
      age_group: 'adult',
      description: 'A soothing, calm voice perfect for bedtime stories',
      voice_name: 'en-US-AriaNeural'
    },
    {
      id: 'child_cheerful',
      name: 'Cheerful Child',
      language: 'en',
      gender: 'female',
      age_group: 'child',
      description: 'An upbeat, energetic voice for adventure stories',
      voice_name: 'en-US-JennyNeural'
    }
  ],

  languages: [
    { code: 'en', name: 'English', native_name: 'English' },
    { code: 'hi', name: 'Hindi', native_name: 'हिन्दी' },
    { code: 'ta', name: 'Tamil', native_name: 'தமிழ்' }
  ],

  tones: ['cheerful', 'adventurous', 'mysterious', 'whimsical', 'educational', 'funny'],
  audiences: ['kids', 'teens', 'adults', 'family', 'toddlers', 'preschool']
};

export default api;
